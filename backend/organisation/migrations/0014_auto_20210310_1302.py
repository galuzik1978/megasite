# Generated by Django 3.1.1 on 2021-03-10 08:02

from django.db import migrations

from organisation.models import DefectList, RowDefects, Table, Reason, Document


def init_defects(apps, schema_editor):
    defects = [
        {
            "phrasing": "наличие освещения этажных площадок перед дверями шахты лифта;",
            "document": "ГОСТ Р 53782-2010"
        },
        {
            "phrasing": "наличие правил пользования лифтом и табличек с номерами телефонов для экстренной связи;",
            "document": "ГОСТ Р 53782-2010"
        },
        {
            "phrasing": "состояние ограждения шахты на предмет отсутствия повреждений;",
            "document": "ГОСТ Р 53782-2010"
        },
        {
            "phrasing": "состояние порогов и обрамлений проемов дверей шахты и кабины;",
            "document": "ГОСТ Р 53782-2010"
        },
        {
            "phrasing": "состояние ограждения дверей шахты и кабины на предмет отсутствия повреждений, коррозии;",
            "document": "ГОСТ Р 53782-2010"
        },
        {
            "phrasing": "состояние раздвижных решетчатых дверей кабины на грузовых лифтах, оборудованных такими дверями, а также измеряют просвет между полосами закрытой двери;",
            "document": "ГОСТ Р 53782-2010"
        },
        {
            "phrasing": "зазоры между сомкнутыми створками автоматических раздвижных дверей шахты и кабины в местах притвора, между створками и порогами порталов, а также между лицевыми поверхностями створок и обвязками дверного проема;",
            "document": "ГОСТ Р 53782-2010"
        },
        {
            "phrasing": "наличие перекрытия створками автоматических раздвижных дверей шахты и кабины обвязки дверного проема;",
            "document": "ГОСТ Р 53782-2010"
        },
        {
            "phrasing": "наличие информации о нахождении кабины на этаже для лифтов, оборудованных распашными дверями шахты;",
            "document": "ГОСТ Р 53782-2010"
        },
        {
            "phrasing": "крепление постов управления в кабине и на этажах, а также состояние постов управления на предмет отсутствия повреждений постов управления и кнопок;",
            "document": "ГОСТ Р 53782-2010"
        }
    ]
    table = Table.objects.all()[0]
    for defect in defects:
        i = 4
        doc = Document.objects.create(name=defect['document'])
        reason = Reason.objects.create(
            document=doc,
            phrasing=defect['phrasing'],
            point="{}.{}".format(5, i)
        )
        d = DefectList.objects.create(
            reason=reason,
            phrasing="Не соответствует: {}".format(defect['phrasing']),
        )
        RowDefects.objects.create(
            table=table,
            defect=d
        )
        i += 1


class Migration(migrations.Migration):

    dependencies = [
        ('organisation', '0013_auto_20210310_1302'),
    ]

    operations = [
        migrations.RunPython(init_defects)
    ]
