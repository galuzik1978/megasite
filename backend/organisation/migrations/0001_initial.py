# Generated by Django 3.1.1 on 2020-09-18 19:57

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccuracyClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Класс точности')),
            ],
        ),
        migrations.CreateModel(
            name='CityType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Вид населенного пункта')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Набор инструментов')),
            ],
        ),
        migrations.CreateModel(
            name='LiftDesign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Вид улицы')),
            ],
        ),
        migrations.CreateModel(
            name='Object',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postcode', models.IntegerField(verbose_name='Почтовый индекс')),
                ('region', models.CharField(max_length=100, verbose_name='Регион')),
                ('city', models.CharField(max_length=100, verbose_name='Город')),
                ('street', models.CharField(max_length=100, verbose_name='Название')),
                ('building', models.CharField(blank=True, max_length=50, null=True, verbose_name='Корпус')),
                ('entrance', models.IntegerField(blank=True, null=True, verbose_name='Номер подъезда')),
                ('office', models.CharField(blank=True, max_length=25, null=True, verbose_name='Номер офиса')),
                ('lifts_count', models.SmallIntegerField(blank=True, null=True, verbose_name='Кол-во лифтов')),
                ('reg_num', models.CharField(blank=True, max_length=25, null=True, verbose_name='Регистрационный номер')),
                ('mf_year', models.DateField(blank=True, null=True, verbose_name='Год выпуска')),
                ('capacity', models.SmallIntegerField(blank=True, null=True, verbose_name='Грузоподъемность')),
                ('floors', models.SmallIntegerField(blank=True, null=True, verbose_name='Кол-во этажей')),
                ('speed', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='Скорость лифта')),
                ('maker', models.CharField(blank=True, max_length=100, null=True, verbose_name='Производитель')),
                ('serial_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Серийный номер')),
                ('date_exam', models.DateField(blank=True, null=True, verbose_name='Дата проверки')),
                ('freq', models.SmallIntegerField(blank=True, null=True, verbose_name='частота')),
                ('auto_door', models.SmallIntegerField(blank=True, null=True, verbose_name='Автоматические двери')),
                ('num_lines', models.SmallIntegerField(blank=True, null=True, verbose_name='Кол-во линий')),
                ('city_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organisation.citytype', verbose_name='Вид населенного пункта')),
            ],
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inn', models.BigIntegerField(help_text='ИНН')),
                ('inn_filial', models.BigIntegerField(blank=True, help_text='ИНН филиала', null=True)),
                ('full_name', models.CharField(help_text='Полное название организации', max_length=255)),
                ('head', models.CharField(help_text='Должность руководителя', max_length=100)),
                ('in_head_name', models.CharField(help_text='Должность руководителя в родительном падеже', max_length=70)),
                ('head_name', models.CharField(help_text='Имя руководителя', max_length=50)),
                ('head_surname', models.CharField(help_text='Отчество руководителя', max_length=50)),
                ('head_last_name', models.CharField(help_text='Фамилия руководителя', max_length=50)),
                ('kpp', models.BigIntegerField(blank=True, help_text='КПП', null=True)),
                ('ogrn', models.BigIntegerField(help_text='ОГРН')),
                ('bank', models.CharField(blank=True, help_text='Наименование банка', max_length=200, null=True)),
                ('account', models.BigIntegerField(blank=True, help_text='Расчетный счет', null=True)),
                ('cor_account', models.BigIntegerField(blank=True, help_text='Кор.счёт', null=True)),
                ('bic', models.IntegerField(blank=True, help_text='БИК', null=True)),
                ('phone', models.BigIntegerField(help_text='Телефон')),
                ('add_phone', models.BigIntegerField(blank=True, help_text='Доп. телефон', null=True)),
                ('fax', models.BigIntegerField(blank=True, help_text='Факс', null=True)),
                ('filial_count', models.SmallIntegerField(blank=True, help_text='Кол-во филииалов', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RangeMeasure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Тип устройства')),
            ],
        ),
        migrations.CreateModel(
            name='StatusDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Статус устройства')),
            ],
        ),
        migrations.CreateModel(
            name='StreetType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Вид улицы')),
            ],
        ),
        migrations.CreateModel(
            name='TypeDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Тип устройства')),
            ],
        ),
        migrations.CreateModel(
            name='TypeLift',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Вид улицы')),
            ],
        ),
        migrations.CreateModel(
            name='TypeOrganisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Тип организации')),
            ],
        ),
        migrations.CreateModel(
            name='TypeProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Тип протокола')),
            ],
        ),
        migrations.CreateModel(
            name='Protocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField(verbose_name='Номер протокола')),
                ('date_act', models.DateField(auto_now=True, verbose_name='Год регистрации')),
                ('date_protocol', models.DateField(auto_now=True, verbose_name='Год регистрации')),
                ('electric_template', models.SmallIntegerField(blank=True, null=True, verbose_name='шаблон протокола')),
                ('enabled_measure', models.SmallIntegerField(blank=True, null=True, verbose_name='шаблон измерений')),
                ('electric_measure', models.SmallIntegerField(blank=True, null=True, verbose_name='шаблон электрических измерений')),
                ('num_control_not_use', models.SmallIntegerField(blank=True, null=True, verbose_name='Не проведенные замеры')),
                ('unit_protection_valid', models.SmallIntegerField(blank=True, null=True, verbose_name='Защита исправна')),
                ('safe_exploitation', models.SmallIntegerField(blank=True, null=True, verbose_name='Эксплуатация безопасна')),
                ('visual_inspection', models.SmallIntegerField(blank=True, null=True, verbose_name='Внешний осмотр')),
                ('manual', models.SmallIntegerField(blank=True, null=True, verbose_name='Ручной режим')),
                ('safety_device', models.SmallIntegerField(blank=True, null=True, verbose_name='Безопасность устройства')),
                ('ropes_brake', models.SmallIntegerField(blank=True, null=True, verbose_name='Канаты исправны')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='customer', to='organisation.organisation', verbose_name='Заказчик')),
                ('customer_person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='customer_person', to=settings.AUTH_USER_MODEL, verbose_name='Контактное лицо заказчика')),
                ('device_set', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='organisation.deviceset', verbose_name='Набор инструментов')),
                ('object_exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organisation.object', verbose_name='Объект')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='owner', to='organisation.organisation', verbose_name='Собственник')),
                ('owner_person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='owner_person', to=settings.AUTH_USER_MODEL, verbose_name='Контактное лицо собственника')),
                ('type_protocol', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='organisation.typeprotocol', verbose_name='Тип протокола')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user', to=settings.AUTH_USER_MODEL, verbose_name='Исполнитель')),
            ],
        ),
        migrations.AddField(
            model_name='organisation',
            name='type_customer',
            field=models.ForeignKey(help_text='Тип клиента', on_delete=django.db.models.deletion.CASCADE, to='organisation.typeorganisation'),
        ),
        migrations.AddField(
            model_name='object',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='organisation.organisation'),
        ),
        migrations.AddField(
            model_name='object',
            name='lift_design',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='organisation.liftdesign', verbose_name='Дизайн лифта'),
        ),
        migrations.AddField(
            model_name='object',
            name='street_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organisation.streettype', verbose_name='Вид улицы'),
        ),
        migrations.AddField(
            model_name='object',
            name='type_lift',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organisation.typelift', verbose_name='Тип лифта'),
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Наименование прибора')),
                ('serial_number', models.CharField(max_length=25, verbose_name='Серийный номер')),
                ('state_reg', models.CharField(max_length=25)),
                ('verify_number', models.CharField(max_length=25)),
                ('verify_date', models.DateField(auto_now=True, verbose_name='Дата последней поверки')),
                ('next_verify', models.DateField(verbose_name='Дата следующей поверки')),
                ('period_verify', models.DurationField(verbose_name='Период поверки')),
                ('certification_center', models.CharField(max_length=25, verbose_name='Сертификационный центр')),
                ('maker', models.CharField(max_length=50, verbose_name='Производитель')),
                ('accuracy_class', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='organisation.accuracyclass')),
                ('device_set', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='organisation.deviceset')),
                ('range_measure', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='organisation.rangemeasure')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='organisation.statusdevice', verbose_name='Статус устройства')),
                ('type_device', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='organisation.typedevice', verbose_name='Тип прибора')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
